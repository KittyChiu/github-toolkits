# This workflow evaluates actions execution time and outputs a job summary.
# It uses the `get_workflow_runs` Python script to call the GitHub API and retrieve workflow runs, which are output to runs.json.
# It then generates a list of workflow names from runs.json and outputs the results to workflow-names.txt.
# Finally, it evaluates workflow runs statistics using the `evaluate_workflow_runs` Python script, and outputs the results to workflow-stats.csv.
# The workflow also generates a Mermaid diagram and table in Markdown format for the report.
# The workflow is triggered by a manual workflow_dispatch event.
#
# Variations:
# - Workflow names can also be manually defined and ordered in the workflow-names.txt file
#
name: Generate Workflow Runs Report

on:
  workflow_dispatch:
    
jobs:
  evaluate-actions-consumption:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      REPO_NAME: ${{ github.repository }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set dates
        run: |
          echo "START_DATE=$(date -d '-1 month' +%Y-%m-%d)" >> "$GITHUB_ENV"
          echo "END_DATE=$(date +%Y-%m-%d)" >> "$GITHUB_ENV"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      # Use the `get_workflow_runs` Python script to call GitHub API and output to runs.json
      - name: Get workflow runs
        run: |
          python ./.github/scripts/get_workflow_runs.py ${{ github.repository_owner }} $(echo "${{ github.repository }}" | cut -d'/' -f2) ${{ env.START_DATE }} ${{ env.END_DATE }}
          cat runs.json

      # Generate list of workflow names from runs.json, OR define the Value Stream actions in workflow-names.txt and comment this step
      - name: Get list of workflow names from runs.json
        run: |
          jq '[.[] | .name ] | unique' runs.json | jq -r '.[]' > workflow-names.txt
          cat workflow-names.txt 

      # Evaluate workflow runs statistics using `evaluate_workflow_runs` Python script, and output to workflow-stats.csv
      - name: Evaluate actions consumption
        run: |
          echo "Evaluating workflow runs statistics"
          python ./.github/scripts/evaluate_workflow_runs.py 
          cat workflow-stats.csv

      # Generate Mermaid diagram in Markdown format 
      - name: Generate Mermaid diagram in markdown
        run: |
          echo "## Value stream view" >> mermaid.md
          echo -e '```mermaid\n' >> mermaid.md
          echo "timeline" >> mermaid.md
          echo "    Stage: Average run duration : Success rate : Frequency" >> mermaid.md

          tail -n +2 workflow-stats.csv | while IFS=, read -r workflow_name average_duration percentage_success total_runs;
          do
            echo "Parse Mermaid diagram: Calculated event column"
            echo "    $workflow_name: $average_duration : $percentage_success : $total_runs" >> mermaid.md
          done
          echo -e '```\n' >> mermaid.md

      # Generate table in Markdown format 
      - name: Generate Table in markdown
        run: |
          echo "## Consumption table view" >> table.md
          echo "| Workflow | Average duration | Success rate | Total runs |" >> table.md
          echo "| -------- | ---------------- | ------------ | ---------- |" >> table.md

          tail -n +2 workflow-stats.csv | while IFS=, read -r workflow_name average_duration percentage_success total_runs;
          do
            echo "Parse Table: Calculated row"
            echo "| $workflow_name \
            | $average_duration \
            | $percentage_success \
            | $total_runs \
            |" >> table.md
          done

      - name: Format calculated result with templates
        run: |
          echo "Combine output files"
          cat mermaid.md table.md > output.md

      - name: Publish result to a new issue
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: Workflow runs consumption summary (${{ env.START_DATE }} - ${{ env.END_DATE }})
          content-filepath: output.md    


