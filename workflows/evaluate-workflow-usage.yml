# Evaluate actions execution time and output as job summary

on:
  workflow_dispatch:
    
env:
  START_DATE: 2023-05-31
  END_DATE: 2023-06-02
  WORKFLOW_NAME: Convert issue to pull request

jobs:
  evaluate-actions-consumption:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      REPO_NAME: ${{ github.repository }}

    steps:
      - name: Evaluate actions consumption
        run: |
          echo "Parse job summary table header"
          echo "| Workflow | Average duration | Success rate | Total runs |" > $GITHUB_STEP_SUMMARY
          echo "| -------- | ---------------- | ------------ | ---------- |" >> $GITHUB_STEP_SUMMARY

          echo "Get all runs"
          gh run list -L 1000 --repo ${{ env.REPO_NAME }} --created ${{ env.START_DATE }}..${{ env.END_DATE }} --json 'conclusion,createdAt,displayTitle,event,headBranch,name,number,startedAt,status,updatedAt,url,workflowName' | jq '[.[] | .duration = (.updatedAt | fromdate) - (.startedAt | fromdate) ]' > runs.json
          cat runs.json

          echo "Filter runs by workflow name"
          jq '[.[] | select(.workflowName == "${{ env.WORKFLOW_NAME }}") ]' runs.json > runs-filtered.json
          cat runs-filtered.json

          echo "Evaluate total runs"
          total_runs=$(jq '[.[] ] | length' runs-filtered.json)

          echo "Evaluate average duration"
          [[ $total_runs > 0 ]] && raw_average_duration=$(jq '[.[] | .duration ] | add/length' runs-filtered.json) || raw_average_duration=0 
          average_duration=$(awk -v var1="$raw_average_duration" -v var2="1" 'BEGIN {printf "%.2fs", var1/var2}')

          echo "Evaluate number of success or skipped runs"
          total_success=$(jq '[.[] | select(.conclusion as $c | ["success", "skipped"] | index($c) ) ] | length' runs-filtered.json)

          echo "Evaluate percentage of success or skipped runs"
          if [[ $total_success > 0 ]] && [[ $total_runs > 0 ]]; then
            percentage_success=$(awk -v var1="$total_success" -v var2="$total_runs" 'BEGIN {printf "%.1f%", var1/var2*100}')
          else
            percentage_success=0.0%
          fi

          echo "Parse results to markdown table"
          echo "| ${{ env.WORKFLOW_NAME }} \
          | $average_duration \
          | $percentage_success \
          | $total_runs \
          |" >> $GITHUB_STEP_SUMMARY

          

