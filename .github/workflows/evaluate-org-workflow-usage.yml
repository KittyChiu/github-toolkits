# This workflow evaluates actions execution time and outputs a job summary.
# It uses the `get_org_workflow_runs` Python script to call the GitHub API and retrieve workflow runs, which are output to runs.json.
# It then evaluates workflow runs statistics using the `evaluate_org_workflow_runs` Python script, and outputs the results to workflow-stats.csv.
# The workflow also generates a table in Markdown format for the report.
# The workflow is triggered by a manual workflow_dispatch event.
#
# Variations:
# - `START_DATE` and `END_DATE` in `step: Set dates` - They are set to one month apart. This can be modified to the desired duration.
# - Template in `step: Generate table diagram in markdown` can be customised with styling.
#
name: Generate Org Workflow Runs Report

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      start-date:
        description: 'The start date for the report'
        type: string
        required: false
      end-date:
        description: 'The end date for the report'
        type: string
        required: false
    
jobs:
  evaluate-actions-consumption:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      REPO_NAME: ${{ github.repository }}
      SCRIPTS_PATH: .github/scripts
      START_DATE: ${{ github.event.inputs.start-date }}
      END_DATE: ${{ github.event.inputs.end-date }}
      RAW_ENDPOINT: https://raw.githubusercontent.com/KittyChiu/github-toolkits/main/scripts

    steps:
      - name: Set start date
        if: ${{ github.event.inputs.start-date == '' }}
        run: echo "START_DATE=$(date -d '-1 month' +%Y-%m-%d)" >> "$GITHUB_ENV"
      - name: Set end date
        if: ${{ github.event.inputs.end-date == '' }}
        run: echo "END_DATE=$(date +%Y-%m-%d)" >> "$GITHUB_ENV"

      - name: Get Scripts
        run: |
          wget -P ${{ env.SCRIPTS_PATH }} \
            ${{ env.RAW_ENDPOINT }}/get_org_workflow_runs.py \
            ${{ env.RAW_ENDPOINT }}/evaluate_org_workflow_runs.py

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      # Use the `get_workflow_runs` Python script to call GitHub API and output to runs.json
      - name: Get workflow runs
        run: |
          python ${{ env.SCRIPTS_PATH }}/get_org_workflow_runs.py ${{ github.repository_owner }} ${{ env.START_DATE }} ${{ env.END_DATE }}
          cat runs.json

      # Evaluate workflow runs statistics using `evaluate_workflow_runs` Python script, and output to workflow-stats.csv
      - name: Evaluate actions consumption
        run: |
          echo "Evaluating workflow runs statistics"
          python ${{ env.SCRIPTS_PATH }}/evaluate_org_workflow_runs.py 
          cat org-workflow-stats.csv

      # Generate table in Markdown format 
      - name: Generate Table in markdown
        run: |
          echo "## Consumption table view" >> table.md
          echo "| Repository | Workflow | Average duration | Success rate | Total runs |" >> table.md
          echo "| ---------- | -------- | ---------------- | ------------ | ---------- |" >> table.md

          tail -n +2 org-workflow-stats.csv | while IFS=, read -r repo_name workflow_name average_duration percentage_success total_runs;
          do
            echo "Parse Table: Calculated row"
            echo "| $repo_name \
            | $workflow_name \
            | $average_duration \
            | $percentage_success \
            | $total_runs \
            |" >> table.md
          done

      - name: Publish result to a new issue
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: Workflow runs consumption summary (${{ env.START_DATE }} - ${{ env.END_DATE }})
          content-filepath: table.md    
